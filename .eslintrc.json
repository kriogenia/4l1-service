{
    "parser": "@typescript-eslint/parser",
    "plugins": [
      "@typescript-eslint",
	  "import"
    ],
    "extends": [
      "eslint:recommended",
      "plugin:@typescript-eslint/recommended",
      "plugin:@typescript-eslint/recommended-requiring-type-checking",
	  "plugin:import/recommended",
	  "plugin:import/typescript",
	  "plugin:node/recommended"
    ],
    "parserOptions": {
      "project": "./tsconfig.json"
    },
    "rules": {
      "max-len": [
        "error",
        {
          "code": 110
        }
      ],
	  "node/no-extraneous-import": ["error", {
		"allowModules": ["@jest/types"]
	  }],
      "no-console": 1,
      "no-extra-boolean-cast": 0,
      "@typescript-eslint/no-unused-vars": [1, { "argsIgnorePattern": "^_" }],
      "@typescript-eslint/restrict-plus-operands": 0,
      "@typescript-eslint/explicit-module-boundary-types": 0,
      "@typescript-eslint/no-explicit-any": 0,
      "@typescript-eslint/no-floating-promises": 0,
      "@typescript-eslint/no-unsafe-member-access": 0,
      "@typescript-eslint/no-unsafe-assignment": 0,
      "@typescript-eslint/no-misused-promises": 0,
	  "node/no-unsupported-features/es-syntax": 0,
	  "node/no-missing-import": 0
    },
	"settings": {
		"import/parsers": {
			"@typescript-eslint/parser": [".ts", ".tsx"]
		},
		"import/resolver": {
			"typescript": {
				"alwaysTryTypes": true, // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`
	  			"project": "./tsconfig.json"
			}
		}
	}
  }